plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT' apply(false)
	id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
	id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
	id('org.spongepowered.mixin') version '0.7-SNAPSHOT' apply(false)
}

String execCmd(List<String> params, String fallback) {
	def stdout = new ByteArrayOutputStream()
	def result = exec {
		commandLine params
		standardOutput = stdout
	}
	return result.getExitValue() != 0 ? fallback : stdout.toString().trim()
}

// We use the version format MAJOR.MINOR.PATCH-COMMIT
version = "${mod_version}-${execCmd(['git', 'rev-parse', '--short', 'HEAD'], 'nogit')}"
group = mod_group

ext {
	// For the config color picker (we include it in our production jar with ShadowJar)
	COLOR_FACTORY = 'org.beryx:awt-color-factory:1.0.2'
	MIXIN_EXTRAS = 'io.github.llamalad7:mixinextras-common:0.3.5'
}

subprojects {
	apply plugin: 'java'

	java.toolchain.languageVersion = JavaLanguageVersion.of(17)
	java.withSourcesJar()
	java.withJavadocJar()

	version = rootProject.version
	group = rootProject.group

	dependencies {
		// For @Nullable
		compileOnly 'org.jetbrains:annotations:23.0.0'

		// For unit tests
		testImplementation 'org.mockito:mockito-core:4.5.1'
		testImplementation 'junit:junit:4.13.2'
		testImplementation("${rootProject.ext.COLOR_FACTORY}")
	}

	jar {
		archiveClassifier.set('dev')
		from(rootProject.file('LICENSE')) {
			rename { "${it}_${mod_name}" }
		}
		manifest {
			attributes([
				'Specification-Title'     : mod_name,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : project.jar.archiveVersion,
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				'Timestamp'               : System.currentTimeMillis(),
				'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
				'Built-On-Minecraft'      : minecraft_version,
				'Main-Class'              : 'io.github.cadiboo.nocubes.DoNotRunThisFromTheConsoleDialog',
			])
		}
	}

	sourcesJar {
		archiveClassifier.set('sources')
		from(rootProject.file('LICENSE')) {
			rename { "${it}_${mod_name}" }
		}
	}

	javadocJar {
		archiveClassifier.set('javadoc')
	}

	javadoc {
		// Gradle doesn't support Java 8's new tags out of the box
		options.tags = [
			'apiNote:a:API Note:',
			'implSpec:a:Implementation Requirements:',
			'implNote:a:Implementation Note:',
		]
	}

	repositories {
		mavenCentral()
		maven {
			name = 'Sponge / Mixin'
			url = 'https://repo.spongepowered.org/repository/maven-public/'
		}
		maven {
			url "https://www.cursemaven.com"
			content {
				includeGroup "curse.maven"
			}
		}
		// Mod jar dependencies in ./libs
		flatDir {
			dir 'libs'
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.getRelease().set(17)
	}

	processResources {
		def expandProps = [
			"minecraft_version"         : minecraft_version,
			"forge_version"             : forge_version,
			"forge_loader_version_range": forge_loader_version_range,
			"forge_version_range"       : forge_version_range,
			"minecraft_version_range"   : minecraft_version_range,
			"fabric_loader_version"     : fabric_loader_version,
			"mod_name"                  : mod_name,
			"mod_id"                    : mod_id,
			"mod_version"               : version,
			"mod_group"                 : project.group, // Else we target the task's group.
			"mod_authors"               : mod_authors,
			"mod_license"               : mod_license,
			"mod_issue_tracker_url"     : mod_issue_tracker_url,
			"mod_update_json_url"       : mod_update_json_url,
			"mod_homepage_url"          : mod_homepage_url,
			"mod_credits"               : mod_credits,
			"mod_description"           : mod_description,
		]

		filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
			expand expandProps
		}
		inputs.properties(expandProps)
	}
}
