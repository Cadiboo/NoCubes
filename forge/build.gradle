plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
	// TODO: Replace Access Transformer with Access Widener
    //accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
		// TODO: Replace Access Transformer with Access Widener
        //convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "nocubes-common.mixins.json"
        mixinConfig "nocubes.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forgeVersion}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	// For the config color picker (we include it in our production jar with ShadowJar)
	shadowCommon(forgeRuntimeLibrary(implementation('org.beryx:awt-color-factory:1.0.2')))

//	modImplementation "curse.maven:KotlinForForge-351264:3331341"
//	modImplementation "curse.maven:BetterFoliage-228529:3335091"

	// For unit tests
	testImplementation 'org.mockito:mockito-core:4.5.1'
	testImplementation 'junit:junit:4.13.2'
}

processResources {
	// Ensures this task is redone when the version changes
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
		// NB: We need to use 'file.jarVersion' in mods.toml because IntelliJ doesn't run this task when it runs our mod in dev
		// This works because 'file.jarVersion' gets handled at runtime by Forge
		// IntelliJ bug: "https://youtrack.jetbrains.com/issue/IDEA-173367/The-processResources-task-is-not-correctly-handled-by-IntelliJ"
		expand 'file': [ jarVersion: project.version ]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
